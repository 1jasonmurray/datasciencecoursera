find.package("devtools")
install.packages("devtools")
find.package("devtools")
install.packages("KernSmooth")
library(KernSmooth)
swirl()
source(swirl)
source(swirl())
swirl()
source swirl
source swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
summary(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
View(flags)
library(datasets)
data("iris")
data(iris)
library(datasets)
data(iris)
?iris
sapply(iris$Sepal.Length, mean)
iris$Sepal.Length
sapply(iris, mean)
tapply(iris, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
data("mtcars")
>mtcars
?mtcars
data("mtcars")
data(mtcars)
head(mtcars)
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
?with
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
avghppercyl <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(eval(avghppercyl$4 - avghppercyl$8))
abs(eval(avghppercyl$4 - avghppercyl$8))
avghppercyl$4 - avghppercyl$8
avghppercyl$4
avghppercyl
class(avghppercyl\)
class(avghppercyl)
?array
get(avghppercyl,1)
get(avghppercyl,4)
class(avghppercyl)
available.packages[1]
avghppercyl[1]
avghppercyl[3]
abs(eval(avghppercyl[1]- avghppercyl[3]))
abs(eval(avghppercyl[2,1]- avghppercyl[2,3]))
abs(eval(avghppercyl[,1]- avghppercyl[,3]))
abs(eval(avghppercyl[1]- avghppercyl[3]))
eval(avghppercyl[1]- avghppercyl[3])
debug(ls)
5000/57000
54/168
.8 * 616
112-43-11.5-12-23
?choose
swirl
swirl()
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
range(g1)
ragne(g2)
range(g2)
differenc <- g1 -g2
difference <- g1 -g2
difference <- g2-g1
mean(difference)
s <- sd(difference)
s
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
qt(.975,9)
t.test(difference)$conf.int
sp <- (8-1)(15.34)^(2+21-1)(18.23)^2
sp <- (8-1)(15.34)^2+(21-1)(18.23)^2
sp <- (8-1)(15.34)^2+(21-1)(18.23)^2
sp <- (8-1)(15.34)^2+(21-1)(18.23)^2
?
?
help
skip
sp <- 7*15.34^2 + 20*18.23^2
ns <- 27
sp < - sqrt(sp/ns)
sp <- sqrt(sp/ns)
skip
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
skip
sp <- sqrt((9*var(g1)+9*var(g2))/18)
skip()
t.test(g2, g1, paired = FALSE, var.equal = TRUE)
t.test(g2, g1, paired = FALSE, var.equal = TRUE)$conf
t.test(g2, g1, paired = TRUE)$conf
skip()
skip()
mydf <- num/den
skip()
10/sqrt(100)
2
2/(10/sqrt(16))
15
qt(.95,15)
dim(fs)
str(fs)
t.test(fs$sheight, fs$fheight, paired = TRUE)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
8
pt(q=2.5, df=15, lower.tail = FALSE)
qnorm(95)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2,lower.tail = FALSE)
mybin
pbinom(6, size=8, prob = .5, lower.tail = FALSE)
pbinom(7, size=8, prob = .5, lower.tail = FALSE)
pbinom(7, size=8, prob = .5)
ppois(9,5,lower.tail = FALSE)
qt(p=.95,df = 8)
qt(p=.95,df = 8) * 30
pt(1.859548,df = 8)
30/3
qt(p=.975,df = 8)
30/sqrt(8)
30/sqrt(8)*qt(p=.95,df = 8)
-6/1.86
-6/2.31
t.test(-2)
t.test(c(5,3))
qt(.975, 19)
qt(.975, 9)
qt(.975, 9)*(sqrt(.68)/sqrt(10)))
qt(.975, 9) * sqrt(.68)/sqrt(10)
qt(.95, 9) * sqrt(.68)/sqrt(10)
qt(.95, 19) * sqrt(.68)/sqrt(10)
qt(.975, 19) * sqrt(.68)/sqrt(10)
sqrt(.68)/sqrt(10)
sqrt(.68)/sqrt(10) * 2.09
t.test(2)
sqrt(.68)/sqrt(10) * qt(.975, 9)
?qt
t.test(3-5)
t.test(3,5)
t.test(c(3,5)
)
t.test(c(3,5), mu = 3
)
t.test(c(3,5), mu = 2)
?t.test
t.test(c(3,5),conf.level = .95)
sqrt(.68/sqrt(20))
sqrt(.68/sqrt(20)) * qt(.975,19)
sqrt(.68)/sqrt(20) * qt(.975,19)
sqrt(.60)/sqrt(20) * qt(.975,19)
sqrt(.60)/sqrt(20)
sqrt(.60)/sqrt(20) *2.093
se <- sqrt((1.5^2*8+1.8^2*8)/16 * (1/9 +1/9))
z <- (-3+1) / se
pvalue <- pnorm(z) * 2
pvalue
base <- c(140, 138, 150, 148, 135)
week2 <- c(132, 135, 151, 146, 130)
t.test(base, week2, paired = TRUE)
t.test(week2, base, paired = TRUE)
mean(base)
mean(base) - mean(week2)
pt(q=c(.025, 97.5),df = 8)
?pt
qt(p=c(.025,97.5),df=8)
qt(p=c(.025,97.5),df=8)
qt(p = c(.025, 97.5),df = 8)
qt(p = .95, df=8)
qt(.975, df=8)
?binom.test
binom.test(3, 4, alternative = "greater")
?rtest
r.test
?r.test
?poisson.test
poisson.test(1, 100, 10/1787, alternative = "greater"
)
poisson.test(10, 1787, 1/10)
poisson.test(10, 1787, 1/10, alternative = "less")
poisson.test(10, 1787, 1/100, alternative = "less")
poisson.test(10, 1787, 1/100)
poisson.test(10, 1787, 1/100, alternative = "less")
qt(.95,df=8)
(23*3)/1.86
qt(.975,df=8)
(2.3*37.1)/3
?power.t.test
power.t.test(n=100, delta=.01, sd=.04, alternative = "one-sided", sig.level = .05, alternative = "one.sided")
power.t.test(n=100, delta=.01, sd=.04, alternative = "one-sided", sig.level = .05, alternative = "one.sided")
power.t.test(n=100, delta=.01, sd=.04, alternative = "one-sided", sig.level = .05)
power.t.test(n=100, delta=.01, sd=.04, alternative = "one.sided", sig.level = .05)
power.t.test(n=100, delta=.01, sd=.04, alternative = "one.sided", sig.level = .05, type = "one.sample")
power.t.test(power=.9, delta=.01, sd=.04, alternative = "one.sided", sig.level = .05, type = "one.sample")
power.t.test(n=100, delta=.01, sd=.04, alternative = "one.sided", sig.level = .1, type = "one.sample")
power.t.test(n=100, delta=.01, sd=.04, alternative = "one.sided", sig.level = .3, type = "one.sample")
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
z
pnorm(30+z,mean=30,lower.tail=FALSE)
pnorm(30+z,mean=32,lower.tail=FALSE)
pnorm(30+z,mean=32, sd=1, lower.tail = FALSE)
pnorm(30+z,mean=32, sd=2, lower.tail = FALSE)
pnorm(30+z*2,mean=32, sd=2, lower.tail = FALSE)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
24/500
skip()
skip()
skip()
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
skip()
skip()
skip()
skip()
sd(meds)
skip()
skip()
skip()
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
skip()
testStat
skip()
obs
skip()
sample(group)
skip()
skip()
skip()
skip()
setwd("~/repos/datasciencecoursera/statinfer")
?set.seed
set.seed(42)
seed
rm(list = ls())
set.seed(42)
?rexp
rexp(10, 2)
rexp(10, 1)
rexp(10, 1)
rexp(10, 1)
rexp(10, 1)
rexp(10, 1)
rexp(10, 1)
rexp(10, 100)
rexp(10, 100)
rexp(10, 100)
rexp(10, 100)
rexp(10, 100)
rexp(10, 10)
rexp(10, 10)
rexp(10, 10)
rexp(10, 10)
rexp(10, 10)
rexp(10, 1)
rexp(10, 1)
rexp(10, 1)
rexp(10, 1)
rexp(10, 1)
rexp(10, 1)
rexp(10, 1)
rexp(10, .2)
rexp(10, .2)
rexp(10, .2)
rexp(10, .2)
rexp(10, .2)
rexp(10, .2)
rexp(10, .2)
rexp(10, .2)
rexp(10, .2)
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
hist(rexp(1000, .2))
mns = NULL
> for (i in 1 : 1000) mns = c(mns, mean(rexp(40,.2)
mns = NULL
> for (i in 1 : 1000) mns = c(mns, mean(rexp(40,.2))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,.2))
hist(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,.2))
)
hist(nms)
his(mns)
hist(mns)
mean(rexp(1000, .2))
mean(mns)
