find.package("devtools")
install.packages("devtools")
find.package("devtools")
install.packages("KernSmooth")
library(KernSmooth)
swirl()
source(swirl)
source(swirl())
swirl()
source swirl
source swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
summary(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
View(flags)
library(datasets)
data("iris")
data(iris)
library(datasets)
data(iris)
?iris
sapply(iris$Sepal.Length, mean)
iris$Sepal.Length
sapply(iris, mean)
tapply(iris, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
data("mtcars")
>mtcars
?mtcars
data("mtcars")
data(mtcars)
head(mtcars)
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
?with
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
avghppercyl <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(eval(avghppercyl$4 - avghppercyl$8))
abs(eval(avghppercyl$4 - avghppercyl$8))
avghppercyl$4 - avghppercyl$8
avghppercyl$4
avghppercyl
class(avghppercyl\)
class(avghppercyl)
?array
get(avghppercyl,1)
get(avghppercyl,4)
class(avghppercyl)
available.packages[1]
avghppercyl[1]
avghppercyl[3]
abs(eval(avghppercyl[1]- avghppercyl[3]))
abs(eval(avghppercyl[2,1]- avghppercyl[2,3]))
abs(eval(avghppercyl[,1]- avghppercyl[,3]))
abs(eval(avghppercyl[1]- avghppercyl[3]))
eval(avghppercyl[1]- avghppercyl[3])
debug(ls)
install.packages(pdflatex)
install.packages('pdflatex')
install.packages('pdflatex')
install.packages('mactex')
library('mactex')
library('pdflatex')
save.image("~/repos/datasciencecoursera/statinfer/Statistical Inference Project (Coursera).RData")
library(dplyr)
library(caret)
library(parallel)
library(doParallel)
library(gbm)
library(randomForest)
library(kernlab)
168.96 + 72.46
rmarkdown::shiny_prerendered_clean('repos/datasciencecoursera/dataproducts/plotlyAssginment/Mushroom_presentation.Rpres')
rmarkdown::shiny_prerendered_clean('repos/datasciencecoursera/dataproducts/plotlyAssginment/MushroomPresentation.Rpres')
install.packages('httpvu')
install.packages('httpuv')
library(httpuv)
install.packages('catools')
install.packages('caTools')
library(caTools)
library(plyr)
library(dplyr)
library(ggplot2)
library(plotly)
library(httpuv)
library(caTools)
rmarkdown::shiny_prerendered_clean('repos/datasciencecoursera/dataproducts/plotlyAssginment/MushroomPresentation.Rpres')
plot_ly(mushrooms, x = cap.color)
plot_ly(data=mushroomsPoison, x = cap.color)
# Chunk 1
library(plyr)
library(dplyr)
library(ggplot2)
library(plotly)
library(httpuv)
library(caTools)
# Chunk 2
data_dir <- "./data"
data_file <- paste(data_dir, "/agaricus-lepiota.data.txt", sep = "")
mushrooms <- read.csv(data_file)
str(mushrooms)
# Chunk 3
mushrooms$edible <- revalue(mushrooms$edible, c("e"="edible","p" = "poisonous"))
mushrooms$cap.shape <- revalue(mushrooms$cap.shape, c("b"="bell","c"="conical","x"="convex","f"="flat","k"="knobbed","s"="sunken"))
mushrooms$cap.surface <- revalue(mushrooms$cap.surface, c("f"="fibrous","g"="grooves","y"="scaly","s"="smooth"))
mushrooms$cap.color <- revalue(mushrooms$cap.color, c("n"="brown","b"="buff","c"="cinnamon","g"="gray","r"="green","p"="pink","u"="purple","e"="red","w"="white","y"="yellow"))
mushrooms$bruises <- revalue(mushrooms$bruises, c("t"="bruises","f"="no"))
mushrooms$odor <- revalue(mushrooms$odor, c("a"="almond","l"="anise","c"="creosote","y"="fishy","f"="foul","m"="musty","n"="none","p"="pungent","s"="spicy"))
mushrooms$gill.attachment <- revalue(mushrooms$gill.attachment, c("a"="attached","d"="descending","f"="free","n"="notched"))
mushrooms$gill.spacing <- revalue(mushrooms$gill.spacing, c("c"="close","w"="crowded","d"="distant"))
mushrooms$gill.size <- revalue(mushrooms$gill.size, c("b"="broad","n"="narrow"))
mushrooms$gill.color <- revalue(mushrooms$gill.color, c("k"="black","n"="brown","b"="buff","h"="chocolate","g"="gray","r"="green","o"="orange","p"="pink","u"="purple","e"="red","w"="white","y"="yellow"))
mushrooms$stalk.shape <- revalue(mushrooms$stalk.shape, c("e"="enlarging","t"="tapering"))
mushrooms$stalk.root <- revalue(mushrooms$stalk.root, c("b"="bulbous","c"="club","u"="cup","e"="equal","z"="rhizomorphs","r"="rooted","?"="missing"))
mushrooms$stalk.surface.above.ring <- revalue(mushrooms$stalk.surface.above.ring, c("f"="fibrous","y"="scaly","k"="silky","s"="smooth"))
mushrooms$stalk.surface.below.ring <- revalue(mushrooms$stalk.surface.below.ring, c("f"="fibrous","y"="scaly","k"="silky","s"="smooth"))
mushrooms$stalk.color.above.ring <- revalue(mushrooms$stalk.color.above.ring, c("n"="brown","b"="buff","c"="cinnamon","g"="gray","o"="orange","p"="pink","e"="red","w"="white","y"="yellow"))
mushrooms$stalk.color.below.ring <- revalue(mushrooms$stalk.color.below.ring, c("n"="brown","b"="buff","c"="cinnamon","g"="gray","o"="orange","p"="pink","e"="red","w"="white","y"="yellow"))
mushrooms$veil.type <- revalue(mushrooms$veil.type, c("p"="partial","u"="universal"))
mushrooms$veil.color <- revalue(mushrooms$veil.color, c("n"="brown","o"="orange","w"="white","y"="yellow"))
mushrooms$ring.number <- revalue(mushrooms$ring.number, c("n"="none","o"="one","t"="two"))
mushrooms$ring.type <- revalue(mushrooms$ring.type, c("c"="cobwebby","e"="evanescent","f"="flaring","l"="large","n"="none","p"="pendant","s"="sheathing","z"="zone"))
mushrooms$spore.print.color <- revalue(mushrooms$spore.print.color, c("k"="black","n"="brown","b"="buff","h"="chocolate","r"="green","o"="orange","u"="purple","w"="white","y"="yellow"))
mushrooms$population <- revalue(mushrooms$population, c("a"="abundant","c"="clustered","n"="numerous","s"="scattered","v"="several","y"="solitary"))
mushrooms$habitat <- revalue(mushrooms$habitat, c("g"="grasses","l"="leaves","m"="meadows","p"="paths","u"="urban","w"="waste","d"="woods"))
# Chunk 1
library(plyr)
library(dplyr)
library(ggplot2)
library(plotly)
library(httpuv)
library(caTools)
data_dir <- "./data"
data_file <- paste(data_dir, "/agaricus-lepiota.data.txt", sep = "")
mushrooms <- read.csv(data_file)
str(mushrooms)
setwd("~/repos/datasciencecoursera/dataproducts/plotlyAssginment")
# Chunk 1
library(plyr)
library(dplyr)
library(ggplot2)
library(plotly)
library(httpuv)
library(caTools)
# Chunk 2
data_dir <- "./data"
data_file <- paste(data_dir, "/agaricus-lepiota.data.txt", sep = "")
mushrooms <- read.csv(data_file)
str(mushrooms)
# Chunk 3
mushrooms$edible <- revalue(mushrooms$edible, c("e"="edible","p" = "poisonous"))
mushrooms$cap.shape <- revalue(mushrooms$cap.shape, c("b"="bell","c"="conical","x"="convex","f"="flat","k"="knobbed","s"="sunken"))
mushrooms$cap.surface <- revalue(mushrooms$cap.surface, c("f"="fibrous","g"="grooves","y"="scaly","s"="smooth"))
mushrooms$cap.color <- revalue(mushrooms$cap.color, c("n"="brown","b"="buff","c"="cinnamon","g"="gray","r"="green","p"="pink","u"="purple","e"="red","w"="white","y"="yellow"))
mushrooms$bruises <- revalue(mushrooms$bruises, c("t"="bruises","f"="no"))
mushrooms$odor <- revalue(mushrooms$odor, c("a"="almond","l"="anise","c"="creosote","y"="fishy","f"="foul","m"="musty","n"="none","p"="pungent","s"="spicy"))
mushrooms$gill.attachment <- revalue(mushrooms$gill.attachment, c("a"="attached","d"="descending","f"="free","n"="notched"))
mushrooms$gill.spacing <- revalue(mushrooms$gill.spacing, c("c"="close","w"="crowded","d"="distant"))
mushrooms$gill.size <- revalue(mushrooms$gill.size, c("b"="broad","n"="narrow"))
mushrooms$gill.color <- revalue(mushrooms$gill.color, c("k"="black","n"="brown","b"="buff","h"="chocolate","g"="gray","r"="green","o"="orange","p"="pink","u"="purple","e"="red","w"="white","y"="yellow"))
mushrooms$stalk.shape <- revalue(mushrooms$stalk.shape, c("e"="enlarging","t"="tapering"))
mushrooms$stalk.root <- revalue(mushrooms$stalk.root, c("b"="bulbous","c"="club","u"="cup","e"="equal","z"="rhizomorphs","r"="rooted","?"="missing"))
mushrooms$stalk.surface.above.ring <- revalue(mushrooms$stalk.surface.above.ring, c("f"="fibrous","y"="scaly","k"="silky","s"="smooth"))
mushrooms$stalk.surface.below.ring <- revalue(mushrooms$stalk.surface.below.ring, c("f"="fibrous","y"="scaly","k"="silky","s"="smooth"))
mushrooms$stalk.color.above.ring <- revalue(mushrooms$stalk.color.above.ring, c("n"="brown","b"="buff","c"="cinnamon","g"="gray","o"="orange","p"="pink","e"="red","w"="white","y"="yellow"))
mushrooms$stalk.color.below.ring <- revalue(mushrooms$stalk.color.below.ring, c("n"="brown","b"="buff","c"="cinnamon","g"="gray","o"="orange","p"="pink","e"="red","w"="white","y"="yellow"))
mushrooms$veil.type <- revalue(mushrooms$veil.type, c("p"="partial","u"="universal"))
mushrooms$veil.color <- revalue(mushrooms$veil.color, c("n"="brown","o"="orange","w"="white","y"="yellow"))
mushrooms$ring.number <- revalue(mushrooms$ring.number, c("n"="none","o"="one","t"="two"))
mushrooms$ring.type <- revalue(mushrooms$ring.type, c("c"="cobwebby","e"="evanescent","f"="flaring","l"="large","n"="none","p"="pendant","s"="sheathing","z"="zone"))
mushrooms$spore.print.color <- revalue(mushrooms$spore.print.color, c("k"="black","n"="brown","b"="buff","h"="chocolate","r"="green","o"="orange","u"="purple","w"="white","y"="yellow"))
mushrooms$population <- revalue(mushrooms$population, c("a"="abundant","c"="clustered","n"="numerous","s"="scattered","v"="several","y"="solitary"))
mushrooms$habitat <- revalue(mushrooms$habitat, c("g"="grasses","l"="leaves","m"="meadows","p"="paths","u"="urban","w"="waste","d"="woods"))
mushroomsPoison <- mushrooms %>% filter(edible=="poisonous") %>% select(-edible)
plot_ly(data=mushroomsPoison, x = cap.color)
plot_ly(data=mushroomsPoison, x = mushroomsPoison$cap.color)
mushroomsPoison <- mushrooms %>% filter(edible=="poisonous") %>% select(-edible)
toPrint <- htmltools::tagList()
i=1
for(name in mushroomsPoison){
#toPlotly <- ggplot(mushroomsPoison,aes(x=name)) + geom_bar(fill="blue") + labs(title=names(mushroomsPoison[i]), x="")
#toPrint[[i]] <- ggplotly(toPlotly)
#i <- i+1
plot_ly(data = mushroomsPoison, x=name)
}
toPrint
mushroomsPoison <- mushrooms %>% filter(edible=="poisonous") %>% select(-edible)
toPrint <- htmltools::tagList()
i=1
for(name in mushroomsPoison){
toPlotly <- ggplot(mushroomsPoison,aes(x=name)) + geom_bar(fill="blue") + labs(title=names(mushroomsPoison[i]), x="")
toPrint[[i]] <- ggplotly(toPlotly)
i <- i+1
}
toPrint
toPrint
mushroomsPoison <- mushrooms %>% filter(edible=="poisonous") %>% select(-edible)
#toPrint <- htmltools::tagList()
#i=1
#for(name in mushroomsPoison){
#	toPlotly <- ggplot(mushroomsPoison,aes(x=name)) + geom_bar(fill="blue") + labs(title=names(mushroomsPoison[i]), x="")
#	toPrint[[i]] <- ggplotly(toPlotly)
#	i <- i+1
}
#toPrint
toPlotly <- ggplot(mushroomsPoison,aes(x=cap.color)) + geom_bar(fill="blue") + labs(title=Cap.Color, x="")
test <- ggplotly(toPlotly)
test
install.packages(webshot)
install.packages('webshot')
library(webshot)
library(plyr)
library(dplyr)
library(ggplot2)
library(plotly)
library(httpuv)
library(caTools)
library(webshot)
toPrint
?ggplotly
ggplotly(toPlotly)
temp <- ggplotly(toPlotly)
temp
