find.package("devtools")
install.packages("devtools")
find.package("devtools")
install.packages("KernSmooth")
library(KernSmooth)
swirl()
source(swirl)
source(swirl())
swirl()
source swirl
source swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
summary(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
View(flags)
library(datasets)
data("iris")
data(iris)
library(datasets)
data(iris)
?iris
sapply(iris$Sepal.Length, mean)
iris$Sepal.Length
sapply(iris, mean)
tapply(iris, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
data("mtcars")
>mtcars
?mtcars
data("mtcars")
data(mtcars)
head(mtcars)
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
?with
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
avghppercyl <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(eval(avghppercyl$4 - avghppercyl$8))
abs(eval(avghppercyl$4 - avghppercyl$8))
avghppercyl$4 - avghppercyl$8
avghppercyl$4
avghppercyl
class(avghppercyl\)
class(avghppercyl)
?array
get(avghppercyl,1)
get(avghppercyl,4)
class(avghppercyl)
available.packages[1]
avghppercyl[1]
avghppercyl[3]
abs(eval(avghppercyl[1]- avghppercyl[3]))
abs(eval(avghppercyl[2,1]- avghppercyl[2,3]))
abs(eval(avghppercyl[,1]- avghppercyl[,3]))
abs(eval(avghppercyl[1]- avghppercyl[3]))
eval(avghppercyl[1]- avghppercyl[3])
debug(ls)
install.packages(pdflatex)
install.packages('pdflatex')
install.packages('pdflatex')
install.packages('mactex')
library('mactex')
library('pdflatex')
save.image("~/repos/datasciencecoursera/statinfer/Statistical Inference Project (Coursera).RData")
load("~/Downloads/test.RData")
suppressMessages(library(rattle))
suppressMessages(library(rattle))
library(rpart.plot)
fancyRpartPlot(model1$finalModel)
install.packages('rpart.plot')
suppressMessages(library(rattle))
library(rpart.plot)
fancyRpartPlot(model1$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages('pgmm')
library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
summary(olive)
str(olive)
m_olive <- train(Area ~ ., "rpart")
library(caret)
m_olive <- train(Area ~ ., "rpart")
m_olive <- train(Area ~ ., data=olive, "rpart")
newdata = as.data.frame(t(colMeans(olive)))
predict(m_olive, newdata)
m_olive$finalModel
suppressMessages(library(rattle))
library(rpart.plot)
fancyRpartPlot(m_olive$finalModel)
olive$Area <- as.factor(olive$Area)
m_olive <- train(Area ~ ., data=olive, "rpart")
m_olive$finalModel
predict(m_olive, newdata)
suppressMessages(library(rattle))
library(rpart.plot)
fancyRpartPlot(m_olive$finalModel)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
str(SAheart)
m_SAheart <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=SAheart, method="glm", family="binary")
warning()
warnings()
m_SAheart <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=SAheart, method="glm", family="binary")
warnings()
m_SAheart <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=SAheart, method="glm", family="binary")
?train
m_SAheart <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=SAheart, method="glm", trControl=trainControl(family = "binary"))
m_SAheart <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=SAheart, method="glm", trControl=trainControl("binary"))
m_SAheart <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=SAheart, method="glm", trControl=trainControl(family = "binary"))
glmcontrol <- trainControl(family="binomial")
glmcontrol <- trainControl(method = "glm" , family="binomial")
glmc <- trainControl(method = "glm" , family="binomial")
traceback()
glmc <- trainControl(family="binomial")
?trainControl
m_SAheart <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=SAheart, method="glm", family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(modelSA, newdata = testSA))
missClass(testSA$chd, predict(m_SAheart, newdata = testSA))
missClass(testSA$chd, predict(m_SAheart, newdata = trainSA))
m_SAheart <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family="binomial")
missClass(testSA$chd, predict(m_SAheart, newdata = trainSA))
missClass(testSA$chd, predict(m_SAheart, newdata = testSA))
testSA$chd <- as.factor(testSA$chd)
trainSA$chd <- as.factor(trainSA$chd)
m_SAheart <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family="binomial")
missClass(testSA$chd, predict(m_SAheart, newdata = trainSA))
missClass(testSA$chd, predict(m_SAheart, newdata = testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1], size = dim(SAheart)[1] / 2, replace = F)
trainSA = SAheart[train, ]
testSA = SAheart[-train, ]
set.seed(13234)
modelSA <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass(testSA$chd, predict(modelSA, newdata = testSA))
missClass(trainSA$chd, predict(modelSA, newdata = trainSA))
summary(vowel.train)
summary(vowel.test)
str(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
m_vowel <- train(y ~ ., data=vowel.train, method="rf")
m_vowel <- train(y ~ ., data=vowel.train, method="rf")
summary(m_vowel)
varImp(m_vowel)
varImpPlot(m_vowel)
m_vowel <- train(y ~ ., data=vowel.train, method="randomforest")
m_vowel <- randomForest(y ~ ., data=vowel.train)
varImpPlot(m_vowel)
varImp(m_vowel)
order(varImp(modvowel), decreasing = T)
order(varImp(m_vowell), decreasing = T)
order(varImp(m_vowel), decreasing = T)
summary(m_vowel)
42+11+23
76+380
.8 * 650
.8 *700
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
str(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
model_rf <- train(y ~., data=vowel.train, method='rf')
model_gbm <- train(y ~., data=vowel.train, method='gbm')
summary(model_rf)
summary(model_gbm)
ls
result_rf <- predict(model_rf, data=vowel.test)
result_rf
result_gbm <- predict(model_gbm, data=vowel.test)
result_gmb
result_gbm
vowel.test$y
?confusionMatrix
confusionMatrix(result_rf, vowel.test$y)
dim(vowel.test)
dim(vowel.train)
result_gbm <- predict(model_gbm, data=vowel.test)
dim(result_gbm)
result_gbm
vowel.test$y
?predict
result_gbm <- predict(model_gbm, newdata=vowel.test)
result_rf <- predict(model_rf, newdata=vowel.test)
result_gbm
result_rf
confusionMatrix(result_rf, vowel.test$y)
confusionMatrix(result_gbm, vowel.test$y)
confusionMatrix(result_gbm, result_rf)
confusionMatrix(result_rf, result_gbm)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
str(training)
rm(list = ls())
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
model_rf <- train(diagnosis ~ ., data=training, method='rf')
model_rfcs <- train(diagnosis ~ ., data=training, method='rf', preProcess = c("center", "scale"))
model_gbm <- train(diagnosis ~ ., data=training, method='gbm')
model_lda <- train(diagnosis ~ ., data=training, method='lda')
summary(model_lda)
predict_rf <- predict(model_rf, newdata = testing)
predict_rfcs <- predict(model_rfcs, newdata = testing)
predict_gbm <- predict(model_gbm, newdata = testing)
predict_lda <- predict(model_lda, newdata = testing)
confusionMatrix(predict_rf, testing$diagnosis)
confusionMatrix(predict_rfcs, testing$diagnosis)
model_gbmcs <- train(diagnosis ~ ., data=training, method='gbm', preProcess = c("center", "scale"))
predict_gbmcs <- predict(model_gbmcs, newdata = testing)
confusionMatrix(predict_gbm, testing$diagnosis)
confusionMatrix(predict_gbmcs, testing$diagnosis)
model_ldacs <- train(diagnosis ~ ., data=training, method='lda', preProcess = c("center", "scale"))
predict_ldacs <- predict(model_ldacs, newdata = testing)
confusionMatrix(predict_lda, testing$diagnosis)
confusionMatrix(predict_ldacs, testing$diagnosis)
confusionMatrix(predict_rf, testing$diagnosis)
confusionMatrix(predict_rfcs, testing$diagnosis)
combo <- data.frame(model_gbm, model_rf, model_lda, training$diagnosis)
combo <- data.frame(predict_gbm, predict_rf, predict_lda, training$diagnosis)
combo <- data.frame(predict_gbm, predict_rf, predict_lda, testing$diagnosis)
head(combo)
model_combo <- train(testing.diagnosis ~ . , data=combo, method='rf')
predict_combo <- predict(model_combo, newdata = testing)
confusionMatrix(predict_combo, testing$diagnosis)
model_combocs <- train(testing.diagnosis ~ . , data=combo, method='rf', preProcess = c("center", "scale"))
predict_combo <- predict(model_combocs, newdata = testing)
confusionMatrix(predict_combocs, testing$diagnosis)
confusionMatrix(predict_combo, testing$diagnosis)
predict_combo <- predict(model_combo, newdata = testing)
predict_combocs <- predict(model_combocs, newdata = testing)
confusionMatrix(predict_combocs, testing$diagnosis)
confusionMatrix(predict_combo, testing$diagnosis)
confusionMatrix(predict_combocs, testing$diagnosis)$Accuracy
confusionMatrix(predict_combo, testing$diagnosis)
confusionMatrix(predict_rf, testing$diagnosis)
confusionMatrix(predict_lda, testing$diagnosis)
confusionMatrix(predict_gbm, testing$diagnosis)
rm(list = ls())
ls
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
mod_lasso <- train(CompressiveStrength ~ ., data = training, method = "lasso")
mod_lasso <- train(CompressiveStrength ~ ., data = training, method = "lasso")
library(elasticnet)
plot.enet(mod_lasso$finalModel, xvar = "penalty", use.color = TRUE)
mod_lasso$finalModel
rm(list = ls())
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
?bats
install.packages("forecast")
library(forecast)
?bats
head training
head(training)
model_bats <- bats(training)
model_bats <- bats(tstrain)
predict(bats) <- predict(model_bats, newdata=testing)
predict_bats <- predict(model_bats, newdata=testing)
summary(predict_bats)
confusionMatrix(predict_bats, test)
confusionMatrix(predict_bats, testing)
predict_bats <- forecast(model_bats,, level = 95, h = dim(testing)[1])
sum(fcast$lower < testing$visitsTumblr & testing$visitsTumblr < fcast$upper) /
dim(testing)[1]
sum(predict_bats$lower < testing$visitsTumblr & testing$visitsTumblr < fcast$upper) /
dim(testing)[1]
sum(predict_bats$lower < testing$visitsTumblr & testing$visitsTumblr < predict_bats$upper) /
dim(testing)[1]
rm(list = ls())
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
install.packages("e1071")
library("e1071")
?`e1071-deprecated`
head(testing)
model_svm <- svm(CompressiveStrength ~ ., data = training)
predict_svm <- predict(model_svm, testing)
confusionMatrix(predict_svm, testing$CompressiveStrength)
predict_svm
testing$CompressiveStrength
accuracy(predict_svm, testing$CompressiveStrength)
setwd("~/repos/datasciencecoursera/machineLearning")
?accuracy
train_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
data_dir <- "./data"
train_file <- paste(data_dir, "/pml-training.csv", sep = "")
test_file <- paste(data_dir, "/pml-testing.csv", sep = "")
training <- read.csv(train_file, stringsAsFactors = FALSE)
testing <- read.csv(test_file, stringsAsFactors = FALSE)
View(testing)
View(training)
head(training,25)
training$classe
test$classe
testing$classe
test$classe
training$classe
names(training)
summary(training)
names(training)
names(testing)
table(is.na(training))
complete.cases(training)
sum(complete.cases(training))
dim(training)
library(dplyr)
filter(data=training, new_window='yes' )
filter(training, new_window='yes' )
filter(training, new_window=='yes' )
sum(complete.cases(training))
sum(complete.cases(testing))
str(training)
save.image("~/repos/datasciencecoursera/machineLearning/HAR - Dumbbell.RData")
